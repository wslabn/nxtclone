name: Auto Release

on:
  push:
    paths:
      - 'package.json'
      - 'agents/version.txt'
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check if version changed
      id: check
      run: |
        NEW_VERSION=$(node -p "require('./package.json').version")
        OLD_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
        
        if [ "$NEW_VERSION" != "$OLD_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version changed: $OLD_VERSION -> $NEW_VERSION"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No version change detected"
        fi

  build-executables:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Build Windows executable
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        pip install -r requirements-build.txt
        python build-windows.py
        mkdir -p ../releases
        copy dist\nxtclone-agent.exe ..\releases\nxtclone-agent-windows.exe
    
    - name: Build Linux executable
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        pip install -r requirements-build.txt
        python build-linux.py
        mkdir -p ../releases
        cp dist/nxtclone-agent ../releases/nxtclone-agent-linux
        cp install-linux.sh ../releases/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables-${{ matrix.os }}
        path: releases/

  auto-release:
    needs: [check-version, build-executables]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies and build source
      run: |
        npm install
        mkdir -p dist
        cp -r server dist/
        cp -r agents dist/
        cp -r web dist/
        cp -r build dist/
        cp package.json dist/
        cp README.md dist/
        cp DEPLOYMENT.md dist/
        cd dist && zip -r ../nxtclone-v${{ needs.check-version.outputs.new-version }}.zip .
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: releases/
    
    - name: Organize artifacts
      run: |
        mkdir -p final-releases
        find releases/ -name "*" -type f -exec cp {} final-releases/ \;
    
    - name: Create Git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag v${{ needs.check-version.outputs.new-version }}
        git push origin v${{ needs.check-version.outputs.new-version }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.new-version }}
        name: NxtClone v${{ needs.check-version.outputs.new-version }}
        body: |
          ## NxtClone Release v${{ needs.check-version.outputs.new-version }}
          
          ### Features
          - Remote monitoring and management
          - Cross-platform agents (Windows, Linux)
          - Real-time system metrics
          - Automatic updates
          - Web-based dashboard
          
          ### Installation
          **Option A - Executables (Recommended):**
          - Windows: Download and run `nxtclone-agent-windows.exe`
          - Linux: Download `nxtclone-agent-linux`, run `chmod +x nxtclone-agent-linux && ./nxtclone-agent-linux`
          
          **Option B - Source:**
          1. Download and extract source code
          2. Run `npm install` and `npm start` for server
          3. Install agent deps: `pip install -r agents/requirements.txt`
          4. Run agents on target machines
          
          ### Auto-Update
          Agents will automatically update from this release.
        files: |
          nxtclone-v${{ needs.check-version.outputs.new-version }}.zip
          final-releases/*
        draft: false
        prerelease: false