name: Auto Release

on:
  push:
    paths:
      - 'package.json'
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check if version changed
      id: check
      run: |
        NEW_VERSION=$(node -p "require('./package.json').version")
        OLD_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
        
        if [ "$NEW_VERSION" != "$OLD_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version changed: $OLD_VERSION -> $NEW_VERSION"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No version change detected"
        fi

  build-executables:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyinstaller psutil websockets requests pystray pillow
    
    - name: Install WiX Toolset
      if: matrix.os == 'windows-latest'
      run: |
        choco install wixtoolset --version=3.11.2 -y
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $GITHUB_PATH
    
    - name: Build Windows executables
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        python build-windows.py
    
    - name: Build MSI Installer
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        build-msi.bat
      shell: cmd
    
    - name: Build Linux executables
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        python build-linux.py
        chmod +x create-linux-installer.sh
        ./create-linux-installer.sh
        
        # Build system service installer
        chmod +x nxtclone-agent-installer-linux-system.sh
        cp nxtclone-agent-installer-linux-system.sh dist/syswatch-agent-installer-linux-system
        
        # Build system-aware tray app
        cd ../agents
        pyinstaller --onefile --name=syswatch-control-system linux_tray_system.py
        cp dist/syswatch-control-system ../build/dist/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables-${{ matrix.os }}
        path: build/dist/

  auto-release:
    needs: [check-version, build-executables]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies and build source
      run: |
        npm install
        mkdir -p dist
        cp -r server dist/
        cp -r agents dist/
        cp -r web dist/
        cp package.json dist/
        cp README.md dist/
        cp TROUBLESHOOTING.md dist/
        cd dist && zip -r ../syswatch-source-v${{ needs.check-version.outputs.new-version }}.zip .
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: releases/
    
    - name: Organize artifacts
      run: |
        mkdir -p final-releases
        find releases/ -name "*" -type f -exec cp {} final-releases/ \;
        cp agents/updater.py final-releases/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.new-version }}
        name: SysWatch v${{ needs.check-version.outputs.new-version }}
        body: |
          ## SysWatch Release v${{ needs.check-version.outputs.new-version }}
          
          ### Features
          - Remote monitoring and management
          - Cross-platform agents (Windows, Linux)
          - Real-time system metrics with improved accuracy
          - Auto-update functionality with robust NSSM handling
          - Web-based dashboard with machine detail pages
          - System tray control applications
          
          ### Quick Installation
          **Windows:** Download and run `SysWatch-Agent-Installer.msi` (recommended) or `syswatch-agent-installer.exe`
          **Linux:** Download and run `./syswatch-agent-installer-linux ws://your-server:3000` (no root required)
          
          ### Optional Control Apps
          **Windows:** Run `syswatch-tray.exe` for system tray control
          **Linux:** Run `./syswatch-control` for GUI/CLI management
          
          ### Auto-Update
          Agents automatically check for and install updates from this release.
        files: |
          syswatch-source-v${{ needs.check-version.outputs.new-version }}.zip
          final-releases/*
        draft: false
        prerelease: false